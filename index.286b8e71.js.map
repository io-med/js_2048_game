{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    emptyCells = [];\n    score = 0;\n    gameStatus = \"idle\";\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.INITIAL_STATE = initialState;\n        this.state = JSON.parse(JSON.stringify(this.INITIAL_STATE));\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.gameStatus;\n    }\n    start() {\n        this.setEmptyCells();\n        this.addNumber();\n        this.addNumber();\n        this.gameStatus = \"playing\";\n    }\n    restart() {\n        this.score = 0;\n        this.emptyCells = [];\n        this.state = JSON.parse(JSON.stringify(this.INITIAL_STATE));\n        this.gameStatus = \"idle\";\n    }\n    moveLeft() {\n        if (this.gameStatus !== \"playing\") return;\n        let moveWasMade = false;\n        const newState = this.state.map((line)=>{\n            const newLine = this.mergeLine(line);\n            if (newLine !== line) moveWasMade = true;\n            return newLine;\n        });\n        if (moveWasMade) this.endMove(newState);\n    }\n    moveRight() {\n        if (this.gameStatus !== \"playing\") return;\n        let moveWasMade = false;\n        const newState = this.state.map((line)=>{\n            const reversedLine = [\n                ...line\n            ].reverse();\n            const newLine = this.mergeLine(reversedLine);\n            if (newLine !== reversedLine) moveWasMade = true;\n            return newLine.reverse();\n        });\n        if (moveWasMade) this.endMove(newState);\n    }\n    moveUp() {\n        if (this.gameStatus !== \"playing\") return;\n        let moveWasMade = false;\n        const rotatedState = this.rotateMatrixCounterclockwise(this.state);\n        const newState = rotatedState.map((line)=>{\n            const newLine = this.mergeLine(line);\n            if (newLine !== line) moveWasMade = true;\n            return newLine;\n        });\n        if (moveWasMade) this.endMove(this.rotateMatrixClockwise(newState));\n    }\n    moveDown() {\n        if (this.gameStatus !== \"playing\") return;\n        let moveWasMade = false;\n        const rotatedState = this.rotateMatrixClockwise(this.state);\n        const newState = rotatedState.map((line)=>{\n            const newLine = this.mergeLine(line);\n            if (newLine !== line) moveWasMade = true;\n            return newLine;\n        });\n        if (moveWasMade) this.endMove(this.rotateMatrixCounterclockwise(newState));\n    }\n    endMove(newState) {\n        this.state = newState;\n        this.setEmptyCells();\n        this.addNumber();\n        if (this.emptyCells.length === 0) this.checkIfGameOver();\n    }\n    mergeLine(line) {\n        const noZeroesLine = line.filter((cell)=>cell !== 0);\n        let scoreToAdd = 0;\n        const mergedLine = noZeroesLine.reduce((acc, cell)=>{\n            if (cell === acc[acc.length - 1]) {\n                const mergedCell = cell * 2;\n                acc.splice(acc.length - 1, 1, mergedCell, 0);\n                scoreToAdd += mergedCell;\n                if (mergedCell === 2048) this.gameStatus = \"win\";\n                return acc;\n            }\n            return [\n                ...acc,\n                cell\n            ];\n        }, []);\n        const mergedNoZeroesLine = mergedLine.filter((cell)=>cell !== 0);\n        const zeroes = new Array(line.length - mergedNoZeroesLine.length).fill(0);\n        const newLine = [\n            ...mergedNoZeroesLine,\n            ...zeroes\n        ];\n        if (scoreToAdd > 0) {\n            this.score += scoreToAdd;\n            return newLine;\n        }\n        if (newLine.toString() === line.toString()) return line;\n        return newLine;\n    }\n    setEmptyCells() {\n        const updatedEmptyCells = [];\n        this.state.forEach((line, lineIndex)=>{\n            line.forEach((cell, cellIndex)=>{\n                if (cell === 0) updatedEmptyCells.push([\n                    lineIndex,\n                    cellIndex\n                ]);\n            });\n        });\n        this.emptyCells = updatedEmptyCells;\n    }\n    addNumber() {\n        const emptyCellCount = this.emptyCells.length;\n        if (emptyCellCount === 0) return;\n        const indexOfEmptyCell = Math.floor(Math.random() * emptyCellCount);\n        const numberToAdd = Math.floor(Math.random() * 10) ? 2 : 4;\n        const stateLineIndex = this.emptyCells[indexOfEmptyCell][0];\n        const stateRowIndex = this.emptyCells[indexOfEmptyCell][1];\n        this.state[stateLineIndex][stateRowIndex] = numberToAdd;\n        this.emptyCells.splice(indexOfEmptyCell, 1);\n    }\n    checkIfGameOver() {\n        const currentState = this.state;\n        for(let rowIndex = 0; rowIndex < currentState.length; rowIndex += 2){\n            const row = currentState[rowIndex];\n            for(let columnIndex = 0; columnIndex < row.length; columnIndex++){\n                if (currentState[rowIndex][columnIndex] === currentState[rowIndex + 1][columnIndex]) return;\n            }\n        }\n        for(let rowIndex = 0; rowIndex < currentState.length; rowIndex++){\n            const row = currentState[rowIndex];\n            for(let columnIndex = 0; columnIndex < row.length; columnIndex += 2){\n                if (currentState[rowIndex][columnIndex] === currentState[rowIndex][columnIndex + 1]) return;\n            }\n        }\n        this.gameStatus = \"lose\";\n    }\n    rotateMatrixClockwise(matrix) {\n        const rotatedMatrix = matrix.map(()=>[]);\n        matrix.forEach((row, rowIndex)=>{\n            row.forEach((cell, cellIndex)=>{\n                rotatedMatrix[cellIndex][matrix.length - rowIndex - 1] = cell;\n            });\n        });\n        return rotatedMatrix;\n    }\n    rotateMatrixCounterclockwise(matrix) {\n        const rotatedMatrix = matrix.map(()=>[]);\n        matrix.forEach((row, rowIndex)=>{\n            row.forEach((cell, cellIndex)=>{\n                rotatedMatrix[matrix.length - cellIndex - 1][rowIndex] = cell;\n            });\n        });\n        return rotatedMatrix;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$keys = {\n    up: \"ArrowUp\",\n    down: \"ArrowDown\",\n    left: \"ArrowLeft\",\n    right: \"ArrowRight\"\n};\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell \");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$messages = document.querySelectorAll(\".message\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageVictory = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$clearMessages = ()=>{\n    for (const message of $09e991522ca7e64e$var$messages)message.classList.add(\"hidden\");\n};\nfunction $09e991522ca7e64e$var$render() {\n    const stateCells = $09e991522ca7e64e$var$game.state.flat(1);\n    for(let i = 0; i < $09e991522ca7e64e$var$cells.length; i++){\n        $09e991522ca7e64e$var$cells[i].innerHTML = stateCells[i] + \"\";\n        $09e991522ca7e64e$var$cells[i].className = `field-cell field-cell--${stateCells[i]}`;\n    }\n    $09e991522ca7e64e$var$score.innerHTML = $09e991522ca7e64e$var$game.score;\n}\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.gameStatus === \"idle\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$button.className = \"button restart\";\n        $09e991522ca7e64e$var$button.innerHTML = \"Restart\";\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$render();\n        return;\n    }\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$clearMessages();\n    $09e991522ca7e64e$var$button.className = \"button start\";\n    $09e991522ca7e64e$var$button.innerHTML = \"Start\";\n    $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$render();\n});\ndocument.addEventListener(\"keydown\", ({ key: key })=>{\n    if ($09e991522ca7e64e$var$game.gameStatus === \"idle\") return;\n    switch(key){\n        case $09e991522ca7e64e$var$keys.up:\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case $09e991522ca7e64e$var$keys.down:\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case $09e991522ca7e64e$var$keys.left:\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case $09e991522ca7e64e$var$keys.right:\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        default:\n            break;\n    }\n    if ($09e991522ca7e64e$var$game.gameStatus === \"win\") $09e991522ca7e64e$var$messageVictory.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.gameStatus === \"lose\") {\n        $09e991522ca7e64e$var$clearMessages();\n        $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    }\n    $09e991522ca7e64e$var$render();\n});\n\n\n//# sourceMappingURL=index.286b8e71.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst keys = {\n  up: 'ArrowUp',\n  down: 'ArrowDown',\n  left: 'ArrowLeft',\n  right: 'ArrowRight',\n};\n\nconst cells = document.querySelectorAll('.field-cell ');\nconst score = document.querySelector('.game-score');\nconst button = document.querySelector('.button');\nconst messages = document.querySelectorAll('.message');\nconst messageStart = document.querySelector('.message-start');\nconst messageVictory = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nconst clearMessages = () => {\n  for (const message of messages) {\n    message.classList.add('hidden');\n  }\n};\n\nfunction render() {\n  const stateCells = game.state.flat(1);\n\n  for (let i = 0; i < cells.length; i++) {\n    cells[i].innerHTML = stateCells[i] + '';\n    cells[i].className = `field-cell field-cell--${stateCells[i]}`;\n  }\n\n  score.innerHTML = game.score;\n}\n\nbutton.addEventListener('click', () => {\n  if (game.gameStatus === 'idle') {\n    game.start();\n    button.className = 'button restart';\n    button.innerHTML = 'Restart';\n    messageStart.classList.add('hidden');\n    render();\n\n    return;\n  }\n\n  game.restart();\n\n  clearMessages();\n\n  button.className = 'button start';\n  button.innerHTML = 'Start';\n\n  messageStart.classList.remove('hidden');\n\n  render();\n});\n\ndocument.addEventListener('keydown', ({ key }) => {\n  if (game.gameStatus === 'idle') {\n    return;\n  }\n\n  switch (key) {\n    case keys.up:\n      game.moveUp();\n      break;\n\n    case keys.down:\n      game.moveDown();\n      break;\n\n    case keys.left:\n      game.moveLeft();\n      break;\n\n    case keys.right:\n      game.moveRight();\n      break;\n\n    default:\n      break;\n  }\n\n  if (game.gameStatus === 'win') {\n    messageVictory.classList.remove('hidden');\n  }\n\n  if (game.gameStatus === 'lose') {\n    clearMessages();\n    messageLose.classList.remove('hidden');\n  }\n\n  render();\n});\n","'use strict';\n\nclass Game {\n  emptyCells = [];\n  score = 0;\n  gameStatus = 'idle';\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.INITIAL_STATE = initialState;\n    this.state = JSON.parse(JSON.stringify(this.INITIAL_STATE));\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.gameStatus;\n  }\n\n  start() {\n    this.setEmptyCells();\n    this.addNumber();\n    this.addNumber();\n\n    this.gameStatus = 'playing';\n  }\n\n  restart() {\n    this.score = 0;\n    this.emptyCells = [];\n    this.state = JSON.parse(JSON.stringify(this.INITIAL_STATE));\n    this.gameStatus = 'idle';\n  }\n\n  moveLeft() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    let moveWasMade = false;\n\n    const newState = this.state.map((line) => {\n      const newLine = this.mergeLine(line);\n\n      if (newLine !== line) {\n        moveWasMade = true;\n      }\n\n      return newLine;\n    });\n\n    if (moveWasMade) {\n      this.endMove(newState);\n    }\n  }\n\n  moveRight() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    let moveWasMade = false;\n\n    const newState = this.state.map((line) => {\n      const reversedLine = [...line].reverse();\n      const newLine = this.mergeLine(reversedLine);\n\n      if (newLine !== reversedLine) {\n        moveWasMade = true;\n      }\n\n      return newLine.reverse();\n    });\n\n    if (moveWasMade) {\n      this.endMove(newState);\n    }\n  }\n\n  moveUp() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    let moveWasMade = false;\n\n    const rotatedState = this.rotateMatrixCounterclockwise(this.state);\n\n    const newState = rotatedState.map((line) => {\n      const newLine = this.mergeLine(line);\n\n      if (newLine !== line) {\n        moveWasMade = true;\n      }\n\n      return newLine;\n    });\n\n    if (moveWasMade) {\n      this.endMove(this.rotateMatrixClockwise(newState));\n    }\n  }\n\n  moveDown() {\n    if (this.gameStatus !== 'playing') {\n      return;\n    }\n\n    let moveWasMade = false;\n\n    const rotatedState = this.rotateMatrixClockwise(this.state);\n\n    const newState = rotatedState.map((line) => {\n      const newLine = this.mergeLine(line);\n\n      if (newLine !== line) {\n        moveWasMade = true;\n      }\n\n      return newLine;\n    });\n\n    if (moveWasMade) {\n      this.endMove(this.rotateMatrixCounterclockwise(newState));\n    }\n  }\n\n  endMove(newState) {\n    this.state = newState;\n\n    this.setEmptyCells();\n    this.addNumber();\n\n    if (this.emptyCells.length === 0) {\n      this.checkIfGameOver();\n    }\n  }\n\n  mergeLine(line) {\n    const noZeroesLine = line.filter((cell) => cell !== 0);\n    let scoreToAdd = 0;\n    const mergedLine = noZeroesLine.reduce((acc, cell) => {\n      if (cell === acc[acc.length - 1]) {\n        const mergedCell = cell * 2;\n\n        acc.splice(acc.length - 1, 1, mergedCell, 0);\n        scoreToAdd += mergedCell;\n\n        if (mergedCell === 2048) {\n          this.gameStatus = 'win';\n        }\n\n        return acc;\n      }\n\n      return [...acc, cell];\n    }, []);\n\n    const mergedNoZeroesLine = mergedLine.filter((cell) => cell !== 0);\n    const zeroes = new Array(line.length - mergedNoZeroesLine.length).fill(0);\n    const newLine = [...mergedNoZeroesLine, ...zeroes];\n\n    if (scoreToAdd > 0) {\n      this.score += scoreToAdd;\n\n      return newLine;\n    }\n\n    if (newLine.toString() === line.toString()) {\n      return line;\n    }\n\n    return newLine;\n  }\n\n  setEmptyCells() {\n    const updatedEmptyCells = [];\n\n    this.state.forEach((line, lineIndex) => {\n      line.forEach((cell, cellIndex) => {\n        if (cell === 0) {\n          updatedEmptyCells.push([lineIndex, cellIndex]);\n        }\n      });\n    });\n\n    this.emptyCells = updatedEmptyCells;\n  }\n\n  addNumber() {\n    const emptyCellCount = this.emptyCells.length;\n\n    if (emptyCellCount === 0) {\n      return;\n    }\n\n    const indexOfEmptyCell = Math.floor(Math.random() * emptyCellCount);\n    const numberToAdd = Math.floor(Math.random() * 10) ? 2 : 4;\n\n    const stateLineIndex = this.emptyCells[indexOfEmptyCell][0];\n    const stateRowIndex = this.emptyCells[indexOfEmptyCell][1];\n\n    this.state[stateLineIndex][stateRowIndex] = numberToAdd;\n\n    this.emptyCells.splice(indexOfEmptyCell, 1);\n  }\n\n  checkIfGameOver() {\n    const currentState = this.state;\n\n    for (let rowIndex = 0; rowIndex < currentState.length; rowIndex += 2) {\n      const row = currentState[rowIndex];\n\n      for (let columnIndex = 0; columnIndex < row.length; columnIndex++) {\n        if (\n          currentState[rowIndex][columnIndex] ===\n          currentState[rowIndex + 1][columnIndex]\n        ) {\n          return;\n        }\n      }\n    }\n\n    for (let rowIndex = 0; rowIndex < currentState.length; rowIndex++) {\n      const row = currentState[rowIndex];\n\n      for (let columnIndex = 0; columnIndex < row.length; columnIndex += 2) {\n        if (\n          currentState[rowIndex][columnIndex] ===\n          currentState[rowIndex][columnIndex + 1]\n        ) {\n          return;\n        }\n      }\n    }\n\n    this.gameStatus = 'lose';\n  }\n\n  rotateMatrixClockwise(matrix) {\n    const rotatedMatrix = matrix.map(() => []);\n\n    matrix.forEach((row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        rotatedMatrix[cellIndex][matrix.length - rowIndex - 1] = cell;\n      });\n    });\n\n    return rotatedMatrix;\n  }\n\n  rotateMatrixCounterclockwise(matrix) {\n    const rotatedMatrix = matrix.map(() => []);\n\n    matrix.forEach((row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        rotatedMatrix[matrix.length - cellIndex - 1][rowIndex] = cell;\n      });\n    });\n\n    return rotatedMatrix;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","emptyCells","score","gameStatus","constructor","initialState","INITIAL_STATE","state","JSON","parse","stringify","getScore","getState","getStatus","start","setEmptyCells","addNumber","restart","moveLeft","moveWasMade","newState","map","line","newLine","mergeLine","endMove","moveRight","reversedLine","reverse","moveUp","rotatedState","rotateMatrixCounterclockwise","rotateMatrixClockwise","moveDown","length","checkIfGameOver","noZeroesLine","filter","cell","scoreToAdd","mergedNoZeroesLine","mergedLine","reduce","acc","mergedCell","splice","zeroes","Array","fill","toString","updatedEmptyCells","forEach","lineIndex","cellIndex","push","emptyCellCount","indexOfEmptyCell","Math","floor","random","stateLineIndex","stateRowIndex","currentState","rowIndex","row","columnIndex","matrix","rotatedMatrix","$09e991522ca7e64e$var$keys","up","down","left","right","$09e991522ca7e64e$var$cells","document","querySelectorAll","$09e991522ca7e64e$var$score","querySelector","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$messages","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageVictory","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$clearMessages","message","classList","add","$09e991522ca7e64e$var$render","stateCells","flat","i","innerHTML","className","addEventListener","remove","key"],"version":3,"file":"index.286b8e71.js.map"}